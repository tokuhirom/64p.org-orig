* Amon による NoPaste アプリの構築

最近、Amon というフレームワークをつくってます。これは、
- 余計なことをしない
- メモリ消費量が少ない
-- 必要以上にモジュールを読まない
- アプリのコードの記述量を減らす
- アプリのコードが読みやすくなるようにする
- web でも cli でもおなじような使い勝手
といったあたりを目標に開発されています。

主に mobirc のウェブまわりのコードがベースになってます。

というわけで、http://gp.ath.cx/nopaste/ でうごいているような NoPaste アプリを Amon でつくってみる。

** install Amon

まずは Amon をとってきて、インストール。

>||
git clone git://github.com/tokuhirom/Amon.git
cd Amon
perl Makefile.PL
make
make test
make installdeps
make install
||<


** 雛形の構築

>||
% amon-setup.pl OreOre::NoPaste
mkdir lib/Oreore/NoPaste
mkdir lib/Oreore/NoPaste/V
mkdir lib/Oreore/NoPaste/V/MT
mkdir lib/Oreore/NoPaste/Web/C
mkdir lib/Oreore/NoPaste/M
mkdir tmpl
mkdir t
writing lib/Oreore/NoPaste/Web.pm
writing Oreore-NoPaste.psgi
writing lib/Oreore/NoPaste/Web/C/Root.pm
writing lib/Oreore/NoPaste/Web/Dispatcher.pm
writing lib/Oreore/NoPaste.pm
writing .gitignore
writing t/01_root.t
writing tmpl/base.mt
writing tmpl/index.mt
writing Makefile.PL
writing lib/Oreore/NoPaste/V/MT/Context.pm
||<

この時点で、以下のようにうてば動作確認が可能。
>||
% plackup OreOre-NoPaste.psgi
Plack::Server::Standalone: Accepting connections at http://0:5000/
||<

** コーディング

*** model

今回は Amon::M::DBI をつかって素の DBI をつかうので、lib/OreOre/NoPaste/M/DB.pm に以下のように記述。

このモジュールは、以後 model("DB") という形で呼びだし可能になる。model("DB")->dbh()  というアクセサで database handler が取得できる。
>|perl|
package OreOre::NoPaste::M::DB;
use base qw/Amon::M::DBI/;
1;
||<

*** Dispatcher

次に、ディスパッチャを記述する。今回は Perl5.10.0 以後から使える given-when 構文を利用
した。given-when 構文を利用すれば、特別なルーティングモジュールをつかわなくても、
容易に記述が可能なので便利だ。

ディスパッチャは、PSGI レスポンスを返り値で返すか、例外の形で返さなくてはいけな
い。

Dispatcher への第二引数 $req は Amon::Request のインスタンスである。 Amon::Request はPlack::Request を継承している。


call($controller, $action, @args) 関数をよぶと、 "OreOre::NoPaste::C::$controller"->$action(@args) がよばれる。

>|perl|
package OreOre::NoPaste::Web::Dispatcher;
use Amon::Web::Dispatcher;
use feature 'switch';

sub dispatch {
    my ($class, $req) = @_;
    given ([$req->method, $req->path_info]) {
        when (['GET', '/']) {
            call("Root", 'index');
        }
        when (['POST', '/post']) {
            call("Root", 'post');
        }
        when (['GET', qr{^/entry/(.+)$}]) {
            call("Root", 'show', $1);
        }
        default {
            res_404();
        }
    }
}

1;
||<

*** コントローラ

最後にコントローラである。

- req() 関数によりリクエストオブジェクトを取得できる。
- model() 関数によりモデルオブジェクトを取得できる。
- res_404() 関数により 404 Not Found レスポンスを返せる
- redirect() 関数によりリダイレクトできる。
- render() 関数で、テンプレートを描画できる。

>|perl|
package OreOre::NoPaste::Web::C::Root;
use Amon::Web::C;
use Data::UUID;

my $uuid_gen = Data::UUID->new;

sub index {
    render("index.mt");
}

sub post {
    if (my $body = req->param("body")) {
        my $uuid = $uuid_gen->create_str();
        my $dbh = model("DB")->dbh;
        my $sth = $dbh->prepare("INSERT INTO entry (id, body) values (?, ?)") or die $dbh->errstr;
        $sth->execute($uuid, $body) or die $dbh->errstr;
        redirect("/entry/$uuid");
    } eles {
        redirect('/');
    }
}

sub show {
    my ($class, $id) = @_;

    if ($id) {
        my $dbh = model("DB")->dbh;
        my $sth = $dbh->prepare('SELECT body FROM entry WHERE id=?') or die $dbh->errstr;
        $sth->execute($id) or die $dbh->errstr;
        my ($body) = $sth->fetchrow_array();
        if ($body) {
            render('show.mt', $body);
        } else {
            res_404();
        }
    } else {
        res_404();
    }
}

1;
||<
